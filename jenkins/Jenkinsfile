pipeline {
	agent any
    options {
        timeout(time: 1, unit: 'HOURS') 
    }
    stages {
        stage('Clean Workspace') {
            steps {
                // Clean workspace before doing anything
				deleteDir()	
            }
		}
		stage ('Git Clone') {
			steps {
				checkout scm
			}
		}
		stage ('Build') {
			steps {
				sh "echo 'Building...'"
				//sh 'mvn clean package'
			}
		}
		stage ('Build Docker Image') {
			steps {
				//sh 'cp ./target/*.war ./docker'
				step([$class: 'DockerBuilderPublisher', cleanImages: false, cleanupWithJenkinsJobDelete: false, cloud: 'docker', dockerFileDirectory: 'docker', pullCredentialsId: '', pushCredentialsId: '', pushOnSuccess: false, tagsString: 'tyt/myspringapp'])
				//dir('docker') {
				//	docker.build("tyt/myspringapp:${env.BUILD_NUMBER}")
				//}
			//	bat "echo 'Building docker image...'"
			//	sh "docker build -t tyt/myspringapp:latest ./docker/"
			}		
		}
		stage ('Tests') {
			steps {
				parallel 'static': {
					sh "echo 'shell scripts to run static tests...'"
				},
				'unit': {
					sh "echo 'shell scripts to run unit tests...'"
				},
				'integration': {
					sh "echo 'shell scripts to run integration tests...'"
				}
			}
		}
		stage ('Deploy') {
			steps {
				sh "echo 'shell scripts to deploy to server...'"
			}
		}
    }
}
